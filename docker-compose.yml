---
version: '3'
services:
  ## MySQL Docker Compose Config
  postgres-order:
    container_name: postgres-order
    image: postgres
    environment: 
      POSTGRES_DB: order-service
      POSTGRES_USER: satish
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes: 
      - ./postgres-order:/data/postgres
    expose:
      - "5431"
    ports:
      - "5431:5431"
    command: -p 5431
    restart: unless-stopped
    
  postgres-inventory:
    container_name: postgres-inventory
    image: postgres
    environment: 
      POSTGRES_DB: inventory-service
      POSTGRES_USER: satish
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes: 
      - ./postgres-inventory:/data/postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    
  ## MySQL Docker Compose Config
  mongo:
    container_name: mongo
    image: mongo:4.4.14-rc0-focal
    restart: unless-stopped
    ports:
      - "27018:27017"
    expose:
      - "27018"
    volumes:
      - ./mongo-data:/data/db
      
  ## Keycloak Config with Mysql database
      
  keycloak:
    container_name: keycloak
    image: jboss/keycloak
    command: 
      - " -b 0.0.0.0"
    ports:
      - "8080:8080"
    environment:
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=admin
      - KEYCLOAK_IMPORT=/tmp/realm-export-jboss-keycloak.json
    #networks:
    #  - keycloak_network
    volumes:
      - ./realms/realm-export-jboss-keycloak.json:/tmp/realm-export-jboss-keycloak.json
          
  ## Zookeeper and Kafka configuration
  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"

  broker:
    container_name: broker
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
      
  ## Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9412:9411"
  
  ## Eureka Server
  discovery-server:
    container_name: discovery-server
    image: satish2121/discovery-servers:arm64
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
  
  api-gateway:
    container_name: api-gateway
    image: satish2121/api-gateways:arm64
    ports:
      - "8182:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
      - keycloak
      - zipkin
      - discovery-server
  
  ## Product-Service Docker Compose Config
  product-service:
    container_name: product-service
    image: satish2121/product-service:arm64
    #platform: linux/amd64
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo
      - discovery-server
      - api-gateway

  ## Order-Service Docker Compose Config
  order-service:
    container_name: order-service
    image: satish2121/order-services:arm64
    #platform: linux/amd64
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5431/order-service
    depends_on:
      - postgres-order
      - broker
      - zipkin
      - discovery-server
      - api-gateway

  ## Inventory-Service Docker Compose Config
  inventory-service:
    container_name: inventory-service
    image: satish2121/inventory-services:arm64
    #platform: linux/amd64
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inventory-service
    depends_on:
      - postgres-inventory
      - discovery-server
      - api-gateway

  ## Notification-Service Docker Compose Config
  notification-service:
    container_name: notification-service
    image: satish2121/notification-services:arm64
    #platform: linux/amd64
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
      - broker
      - discovery-server
      - api-gateway
  
  ## Prometheus 
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - product-service
      - inventory-service
      - order-service
      - notification-service

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./grafana:/var/lib/grafana
   